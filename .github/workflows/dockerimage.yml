---
name: Docker Build/Publish Image
on:
  push:
    branches: [master, dev]
jobs:
  build:
    runs-on: ubuntu-18.04
    env:
      DOCKER_IMAGE: tigit/green-pi
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_TARGET_PLATFORM: linux/arm/v7
    steps:
      - name: Checkout the code
        uses: actions/checkout@v1
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Prepare
        if: success()
        id: prepare
        run: |
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${{ steps.extract_branch.outputs.branch }}
      # - name: Run tests
      #   id: test
      #   run: |
      #     docker-compose -f docker-compose.test.yml up green-pi-test
      - name: Docker Login
        if: success()
        run: |
          echo "${DOCKER_PASSWORD}" |
          docker login --username "${DOCKER_USERNAME}" --password-stdin
      - name: Run Buildx (push image)
        if: success()
        run: >
          docker buildx build
          --cache-from "type=local,src=/tmp/.buildx-cache"
          --cache-to "type=local,dest=/tmp/.buildx-cache"
          --platform ${{ steps.prepare.outputs.docker_platform }}
          --output "type=image,push=true"
          --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
          --file ./Dockerfile ./
